// Code generated by goa v3.1.3, DO NOT EDIT.
//
// maze gRPC client
//
// Command:
// $ goa gen genmaze/design

package client

import (
	"context"
	mazepb "genmaze/gen/grpc/maze/pb"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli mazepb.MazeClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the maze service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: mazepb.NewMazeClient(cc),
		opts:    opts,
	}
}

// Gen calls the "Gen" function in mazepb.MazeClient interface.
func (c *Client) Gen() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildGenFunc(c.grpccli, c.opts...),
			EncodeGenRequest,
			DecodeGenResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}
