// Code generated by goa v3.1.3, DO NOT EDIT.
//
// maze views
//
// Command:
// $ goa gen genmaze/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// GeneratedMaze is the viewed result type that is projected based on a view.
type GeneratedMaze struct {
	// Type to project
	Projected *GeneratedMazeView
	// View to render
	View string
}

// GeneratedMazeView is a type that runs validations on a projected type.
type GeneratedMazeView struct {
	Field *string
}

var (
	// GeneratedMazeMap is a map of attribute names in result type GeneratedMaze
	// indexed by view name.
	GeneratedMazeMap = map[string][]string{
		"default": []string{
			"field",
		},
	}
)

// ValidateGeneratedMaze runs the validations defined on the viewed result type
// GeneratedMaze.
func ValidateGeneratedMaze(result *GeneratedMaze) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGeneratedMazeView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateGeneratedMazeView runs the validations defined on GeneratedMazeView
// using the "default" view.
func ValidateGeneratedMazeView(result *GeneratedMazeView) (err error) {

	return
}
