// Code generated by goa v3.1.3, DO NOT EDIT.
//
// maze HTTP server types
//
// Command:
// $ goa gen genmaze/design

package server

import (
	maze "genmaze/gen/maze"
	mazeviews "genmaze/gen/maze/views"

	goa "goa.design/goa/v3/pkg"
)

// GenRequestBody is the type of the "maze" service "gen" endpoint HTTP request
// body.
type GenRequestBody struct {
	// field size x
	W *int `form:"w,omitempty" json:"w,omitempty" xml:"w,omitempty"`
	// field size y
	H *int `form:"h,omitempty" json:"h,omitempty" xml:"h,omitempty"`
}

// GenResponseBody is the type of the "maze" service "gen" endpoint HTTP
// response body.
type GenResponseBody struct {
	Field *string `form:"field,omitempty" json:"field,omitempty" xml:"field,omitempty"`
}

// NewGenResponseBody builds the HTTP response body from the result of the
// "gen" endpoint of the "maze" service.
func NewGenResponseBody(res *mazeviews.GeneratedMazeView) *GenResponseBody {
	body := &GenResponseBody{
		Field: res.Field,
	}
	return body
}

// NewGenPayload builds a maze service gen endpoint payload.
func NewGenPayload(body *GenRequestBody) *maze.GenPayload {
	v := &maze.GenPayload{
		W: *body.W,
		H: *body.H,
	}

	return v
}

// ValidateGenRequestBody runs the validations defined on GenRequestBody
func ValidateGenRequestBody(body *GenRequestBody) (err error) {
	if body.W == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("w", "body"))
	}
	if body.H == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("h", "body"))
	}
	if body.W != nil {
		if *body.W < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.w", *body.W, 1, true))
		}
	}
	if body.W != nil {
		if *body.W > 1001 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.w", *body.W, 1001, false))
		}
	}
	if body.H != nil {
		if *body.H < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.h", *body.H, 1, true))
		}
	}
	if body.H != nil {
		if *body.H > 1001 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.h", *body.H, 1001, false))
		}
	}
	return
}
