// Code generated by goa v3.1.3, DO NOT EDIT.
//
// maze HTTP client types
//
// Command:
// $ goa gen genmaze/design

package client

import (
	maze "genmaze/gen/maze"
	mazeviews "genmaze/gen/maze/views"
)

// GenRequestBody is the type of the "maze" service "gen" endpoint HTTP request
// body.
type GenRequestBody struct {
	// field size x
	X int `form:"x" json:"x" xml:"x"`
	// field size y
	Y int `form:"y" json:"y" xml:"y"`
}

// GenResponseBody is the type of the "maze" service "gen" endpoint HTTP
// response body.
type GenResponseBody struct {
	Field *string               `form:"field,omitempty" json:"field,omitempty" xml:"field,omitempty"`
	Start *PositionResponseBody `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	Goal  *PositionResponseBody `form:"goal,omitempty" json:"goal,omitempty" xml:"goal,omitempty"`
}

// PositionResponseBody is used to define fields on response body types.
type PositionResponseBody struct {
	X *int `form:"x,omitempty" json:"x,omitempty" xml:"x,omitempty"`
	Y *int `form:"y,omitempty" json:"y,omitempty" xml:"y,omitempty"`
}

// NewGenRequestBody builds the HTTP request body from the payload of the "gen"
// endpoint of the "maze" service.
func NewGenRequestBody(p *maze.GenPayload) *GenRequestBody {
	body := &GenRequestBody{
		X: p.X,
		Y: p.Y,
	}
	return body
}

// NewGeneratedMazeViewOK builds a "maze" service "gen" endpoint result from a
// HTTP "OK" response.
func NewGeneratedMazeViewOK(body *GenResponseBody) *mazeviews.GeneratedMazeView {
	v := &mazeviews.GeneratedMazeView{
		Field: body.Field,
	}
	if body.Start != nil {
		v.Start = unmarshalPositionResponseBodyToMazeviewsPositionView(body.Start)
	}
	if body.Goal != nil {
		v.Goal = unmarshalPositionResponseBodyToMazeviewsPositionView(body.Goal)
	}

	return v
}
