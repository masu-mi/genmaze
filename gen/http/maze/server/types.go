// Code generated by goa v3.1.3, DO NOT EDIT.
//
// maze HTTP server types
//
// Command:
// $ goa gen genmaze/design

package server

import (
	maze "genmaze/gen/maze"
	mazeviews "genmaze/gen/maze/views"

	goa "goa.design/goa/v3/pkg"
)

// GenRequestBody is the type of the "maze" service "gen" endpoint HTTP request
// body.
type GenRequestBody struct {
	// field size x
	X *int `form:"x,omitempty" json:"x,omitempty" xml:"x,omitempty"`
	// field size y
	Y *int `form:"y,omitempty" json:"y,omitempty" xml:"y,omitempty"`
}

// GenResponseBody is the type of the "maze" service "gen" endpoint HTTP
// response body.
type GenResponseBody struct {
	Field *string               `form:"field,omitempty" json:"field,omitempty" xml:"field,omitempty"`
	Start *PositionResponseBody `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	Goal  *PositionResponseBody `form:"goal,omitempty" json:"goal,omitempty" xml:"goal,omitempty"`
}

// PositionResponseBody is used to define fields on response body types.
type PositionResponseBody struct {
	X *int `form:"x,omitempty" json:"x,omitempty" xml:"x,omitempty"`
	Y *int `form:"y,omitempty" json:"y,omitempty" xml:"y,omitempty"`
}

// NewGenResponseBody builds the HTTP response body from the result of the
// "gen" endpoint of the "maze" service.
func NewGenResponseBody(res *mazeviews.GeneratedMazeView) *GenResponseBody {
	body := &GenResponseBody{
		Field: res.Field,
	}
	if res.Start != nil {
		body.Start = marshalMazeviewsPositionViewToPositionResponseBody(res.Start)
	}
	if res.Goal != nil {
		body.Goal = marshalMazeviewsPositionViewToPositionResponseBody(res.Goal)
	}
	return body
}

// NewGenPayload builds a maze service gen endpoint payload.
func NewGenPayload(body *GenRequestBody) *maze.GenPayload {
	v := &maze.GenPayload{
		X: *body.X,
		Y: *body.Y,
	}

	return v
}

// ValidateGenRequestBody runs the validations defined on GenRequestBody
func ValidateGenRequestBody(body *GenRequestBody) (err error) {
	if body.X == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("x", "body"))
	}
	if body.Y == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("y", "body"))
	}
	if body.X != nil {
		if *body.X < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.x", *body.X, 1, true))
		}
	}
	if body.X != nil {
		if *body.X > 1001 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.x", *body.X, 1001, false))
		}
	}
	if body.Y != nil {
		if *body.Y < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.y", *body.Y, 1, true))
		}
	}
	if body.Y != nil {
		if *body.Y > 1001 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.y", *body.Y, 1001, false))
		}
	}
	return
}
