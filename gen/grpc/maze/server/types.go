// Code generated by goa v3.1.3, DO NOT EDIT.
//
// maze gRPC server types
//
// Command:
// $ goa gen genmaze/design

package server

import (
	mazepb "genmaze/gen/grpc/maze/pb"
	maze "genmaze/gen/maze"
	mazeviews "genmaze/gen/maze/views"

	goa "goa.design/goa/v3/pkg"
)

// NewGenPayload builds the payload of the "gen" endpoint of the "maze" service
// from the gRPC request type.
func NewGenPayload(message *mazepb.GenRequest) *maze.GenPayload {
	v := &maze.GenPayload{
		X: int(message.X),
		Y: int(message.Y),
	}
	return v
}

// NewGenResponse builds the gRPC response type from the result of the "gen"
// endpoint of the "maze" service.
func NewGenResponse(result *mazeviews.GeneratedMazeView) *mazepb.GenResponse {
	message := &mazepb.GenResponse{}
	if result.Field != nil {
		message.Field = *result.Field
	}
	if result.Start != nil {
		message.Start = svcMazeviewsPositionViewToMazepbPosition(result.Start)
	}
	if result.Goal != nil {
		message.Goal = svcMazeviewsPositionViewToMazepbPosition(result.Goal)
	}
	return message
}

// ValidateGenRequest runs the validations defined on GenRequest.
func ValidateGenRequest(message *mazepb.GenRequest) (err error) {
	if message.X < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.x", message.X, 1, true))
	}
	if message.X > 1001 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.x", message.X, 1001, false))
	}
	if message.Y < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.y", message.Y, 1, true))
	}
	if message.Y > 1001 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.y", message.Y, 1001, false))
	}
	return
}

// svcMazeviewsPositionViewToMazepbPosition builds a value of type
// *mazepb.Position from a value of type *mazeviews.PositionView.
func svcMazeviewsPositionViewToMazepbPosition(v *mazeviews.PositionView) *mazepb.Position {
	if v == nil {
		return nil
	}
	res := &mazepb.Position{}
	if v.X != nil {
		res.X = int32(*v.X)
	}
	if v.Y != nil {
		res.Y = int32(*v.Y)
	}

	return res
}

// protobufMazepbPositionToMazeviewsPositionView builds a value of type
// *mazeviews.PositionView from a value of type *mazepb.Position.
func protobufMazepbPositionToMazeviewsPositionView(v *mazepb.Position) *mazeviews.PositionView {
	if v == nil {
		return nil
	}
	res := &mazeviews.PositionView{}
	if v.X != 0 {
		xptr := int(v.X)
		res.X = &xptr
	}
	if v.Y != 0 {
		yptr := int(v.Y)
		res.Y = &yptr
	}

	return res
}
