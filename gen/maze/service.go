// Code generated by goa v3.1.3, DO NOT EDIT.
//
// maze service
//
// Command:
// $ goa gen genmaze/design

package maze

import (
	"context"
	mazeviews "genmaze/gen/maze/views"
)

// The genmaze service performs operations on numbers.
type Service interface {
	// Gen implements gen.
	Gen(context.Context, *GenPayload) (res *GeneratedMaze, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "maze"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"gen"}

// GenPayload is the payload type of the maze service gen method.
type GenPayload struct {
	// field size x
	W int
	// field size y
	H int
}

// GeneratedMaze is the result type of the maze service gen method.
type GeneratedMaze struct {
	Field *string
}

// NewGeneratedMaze initializes result type GeneratedMaze from viewed result
// type GeneratedMaze.
func NewGeneratedMaze(vres *mazeviews.GeneratedMaze) *GeneratedMaze {
	return newGeneratedMaze(vres.Projected)
}

// NewViewedGeneratedMaze initializes viewed result type GeneratedMaze from
// result type GeneratedMaze using the given view.
func NewViewedGeneratedMaze(res *GeneratedMaze, view string) *mazeviews.GeneratedMaze {
	p := newGeneratedMazeView(res)
	return &mazeviews.GeneratedMaze{Projected: p, View: "default"}
}

// newGeneratedMaze converts projected type GeneratedMaze to service type
// GeneratedMaze.
func newGeneratedMaze(vres *mazeviews.GeneratedMazeView) *GeneratedMaze {
	res := &GeneratedMaze{
		Field: vres.Field,
	}
	return res
}

// newGeneratedMazeView projects result type GeneratedMaze to projected type
// GeneratedMazeView using the "default" view.
func newGeneratedMazeView(res *GeneratedMaze) *mazeviews.GeneratedMazeView {
	vres := &mazeviews.GeneratedMazeView{
		Field: res.Field,
	}
	return vres
}
