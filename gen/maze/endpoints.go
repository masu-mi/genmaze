// Code generated by goa v3.1.3, DO NOT EDIT.
//
// maze endpoints
//
// Command:
// $ goa gen genmaze/design

package maze

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "maze" service endpoints.
type Endpoints struct {
	Gen goa.Endpoint
}

// NewEndpoints wraps the methods of the "maze" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Gen: NewGenEndpoint(s),
	}
}

// Use applies the given middleware to all the "maze" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Gen = m(e.Gen)
}

// NewGenEndpoint returns an endpoint function that calls the method "gen" of
// service "maze".
func NewGenEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GenPayload)
		return s.Gen(ctx, p)
	}
}
