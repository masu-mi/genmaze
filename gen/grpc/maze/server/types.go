// Code generated by goa v3.1.3, DO NOT EDIT.
//
// maze gRPC server types
//
// Command:
// $ goa gen genmaze/design

package server

import (
	mazepb "genmaze/gen/grpc/maze/pb"
	maze "genmaze/gen/maze"
	mazeviews "genmaze/gen/maze/views"

	goa "goa.design/goa/v3/pkg"
)

// NewGenPayload builds the payload of the "gen" endpoint of the "maze" service
// from the gRPC request type.
func NewGenPayload(message *mazepb.GenRequest) *maze.GenPayload {
	v := &maze.GenPayload{
		W: int(message.W),
		H: int(message.H),
	}
	return v
}

// NewGenResponse builds the gRPC response type from the result of the "gen"
// endpoint of the "maze" service.
func NewGenResponse(result *mazeviews.GeneratedMazeView) *mazepb.GenResponse {
	message := &mazepb.GenResponse{}
	if result.Field != nil {
		message.Field = *result.Field
	}
	return message
}

// ValidateGenRequest runs the validations defined on GenRequest.
func ValidateGenRequest(message *mazepb.GenRequest) (err error) {
	if message.W < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.w", message.W, 1, true))
	}
	if message.W > 1001 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.w", message.W, 1001, false))
	}
	if message.H < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.h", message.H, 1, true))
	}
	if message.H > 1001 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("message.h", message.H, 1001, false))
	}
	return
}
