// Code generated by goa v3.1.3, DO NOT EDIT.
//
// maze gRPC server encoders and decoders
//
// Command:
// $ goa gen genmaze/design

package server

import (
	"context"
	mazepb "genmaze/gen/grpc/maze/pb"
	maze "genmaze/gen/maze"
	mazeviews "genmaze/gen/maze/views"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeGenResponse encodes responses from the "maze" service "gen" endpoint.
func EncodeGenResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*mazeviews.GeneratedMaze)
	if !ok {
		return nil, goagrpc.ErrInvalidType("maze", "gen", "*mazeviews.GeneratedMaze", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewGenResponse(result)
	return resp, nil
}

// DecodeGenRequest decodes requests sent to "maze" service "gen" endpoint.
func DecodeGenRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *mazepb.GenRequest
		ok      bool
	)
	{
		if message, ok = v.(*mazepb.GenRequest); !ok {
			return nil, goagrpc.ErrInvalidType("maze", "gen", "*mazepb.GenRequest", v)
		}
		if err := ValidateGenRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *maze.GenPayload
	{
		payload = NewGenPayload(message)
	}
	return payload, nil
}
